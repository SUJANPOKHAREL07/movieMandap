generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model user {
    id              Int             @id @default(autoincrement())
    username        String          @unique
    email           String          @unique
    password        String
    createdAt       DateTime        @default(now())
    udpatedAt       DateTime        @default(now()) @updatedAt
    verified        Boolean         @default(false)
    otpVerify       String?         @default("")
    otpExpired      DateTime?
    updateOtp       String?
    updateOtpExpire DateTime?
    resetOtp        String?         @default("")
    resetOtpExpired DateTime?
    role            Role            @default(user)
    login           login[]
    Review          Review[]
    Like            Like[]
    Comment         Comment[]
    WatchlistItem   WatchlistItem[]
    followers       Follow[]        @relation("Follower")
    following       Follow[]        @relation("Following")
    Follow          Follow[]

    @@unique([email, id])
}

enum Role {
    user
    moderator
    admin
}

model login {
    id            Int      @id @default(autoincrement())
    userId        Int
    useremail     String
    password      String
    role          Role
    refresh_token String   @db.Text()
    user          user?    @relation(fields: [useremail, userId], references: [email, id])
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model Movie {
    id                     Int                      @id @default(autoincrement())
    title                  String                   @unique
    originalTitle          String?
    overview               String?
    releaseDate            DateTime?
    runtime                Int?
    posterPath             String?
    trailerLink            String?
    budget                 Int?
    revenue                Int?
    status                 movieStatus              @default(IN_PRODUCTION)
    tagline                String?
    adult                  Boolean                  @default(false)
    MovieGenre             MovieGenre[]
    MovieProductionCompany MovieProductionCompany[]
    crewMember             crewMember[]
    CastMember             CastMember[]
    Review                 Review[]
    WatchlistItem          WatchlistItem[]

    @@unique([id, title])
    @@map("movies")
}

enum movieStatus {
    RELEASED
    IN_PRODUCTION
    POST_PRODUCTION
    PLANNED
    CANCELLED
    RUMORED
}

model Genre {
    id         String       @id @default(uuid())
    name       String       @unique
    MovieGenre MovieGenre[]

    @@unique([id, name])
    @@map("generes")
}

model MovieGenre {
    id        String @id @default(uuid())
    movieId   Int
    generesId String

    movie Movie @relation(fields: [movieId], references: [id])
    genre Genre @relation(fields: [generesId], references: [id])

    @@unique([movieId, generesId])
    @@map("movie_genere")
}

model ProductionCompany {
    id                     Int                      @id @default(autoincrement())
    name                   String
    logoPath               String?
    originCOuntry          String?
    MovieProductionCompany MovieProductionCompany[]

    @@unique([id, name])
    @@map("production_companies")
}

model MovieProductionCompany {
    id           Int               @id @default(autoincrement())
    movieId      Int
    productionId Int
    movie        Movie             @relation(references: [id], fields: [movieId])
    company      ProductionCompany @relation(references: [id], fields: [productionId])

    @@unique([movieId, productionId])
    @@map("movie_production_companies")
}

// people worked in the movie
model Person {
    id         Int          @id @default(autoincrement())
    name       String
    birthDay   DateTime
    deathDay   DateTime?
    birthPlace String?
    socialPath String?
    adult      Boolean      @default(true)
    crewMember crewMember[]
    CastMember CastMember[]

    @@map("peoples")
}

model crewMember {
    id         Int    @id @default(autoincrement())
    movieId    Int
    personId   Int
    department String
    job        String

    movie  Movie  @relation(references: [id], fields: [movieId])
    person Person @relation(references: [id], fields: [personId])

    @@unique([movieId, personId, job])
    @@map("crew_member")
}

model CastMember {
    id        Int    @id @default(autoincrement())
    movieId   Int
    personId  Int
    character String
    // order Int
    creditId  Int

    movie  Movie  @relation(references: [id], fields: [movieId])
    person Person @relation(references: [id], fields: [personId])

    @@map("cast_member")
}

model Review {
    id         Int      @id @default(autoincrement())
    title      String
    content    String
    rating     Ratings  @default(Good_To_Watch)
    isSpoiler  Boolean  @default(false)
    creadtedAt DateTime @default(now())
    updatedAt  DateTime @updatedAt
    userId     Int
    movieId    Int

    user    user      @relation(references: [id], fields: [userId])
    movie   Movie     @relation(references: [id], fields: [movieId])
    Like    Like[]
    Comment Comment[]

    @@map("reviews")
}

enum Ratings {
    Worst
    Bearable
    Good_To_Watch
    Worthy
    Absolute_Cinema
}

model Like {
    id        Int      @id @default(autoincrement())
    userId    Int
    reviewId  Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   user   @relation(references: [id], fields: [userId])
    review Review @relation(references: [id], fields: [reviewId])

    @@map("likes")
}

model Comment {
    id        Int      @id @default(autoincrement())
    content   String
    userId    Int
    reviewId  Int
    parentId  Int?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user    user      @relation(references: [id], fields: [userId], onDelete: Cascade)
    review  Review    @relation(fields: [reviewId], references: [id], onDelete: Cascade)
    parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
    replies Comment[] @relation("CommentReplies")

    @@map("comments")
}

model WatchlistItem {
    id      Int      @id @default(autoincrement())
    userId  Int
    movieId Int
    addedAt DateTime @default(now())
    note    String?

    user  user  @relation(references: [id], fields: [userId], onDelete: Cascade)
    movie Movie @relation(references: [id], fields: [movieId], onDelete: Cascade)

    @@map("watchlist_items")
}

model Follow {
    id          Int      @id @default(autoincrement())
    followerId  Int
    followingId Int
    createdAt   DateTime @default(now())

    follower  user  @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
    following user  @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
    user      user? @relation(fields: [userId], references: [id])
    userId    Int?
}
