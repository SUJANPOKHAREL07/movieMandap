generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model user {
    id              Int       @id @default(autoincrement())
    username        String    @unique
    email           String    @unique
    password        String
    createdAt       DateTime  @default(now())
    udpatedAt       DateTime  @default(now()) @updatedAt
    verified        Boolean   @default(false)
    otpVerify       String?   @default("")
    otpExpired      DateTime?
    updateOtp       String?
    updateOtpExpire DateTime?
    resetOtp        String?   @default("")
    resetOtpExpired DateTime?
    role            Role      @default(user)
    login           login[]

    @@unique([email, id])
}

enum Role {
    user
    moderator
    admin
}

model login {
    id            Int      @id @default(autoincrement())
    userId        Int
    useremail     String
    password      String
    role          Role
    refresh_token String   @db.Text()
    user          user?    @relation(fields: [useremail, userId], references: [email, id])
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model Movie {
    id                     Int                      @id @default(autoincrement())
    title                  String                   @unique
    originalTitle          String?
    overview               String?
    releaseDate            DateTime?
    runtime                Int?
    posterPath             String?
    trailerLink            String?
    budget                 Int?
    revenue                Int?
    status                 movieStatus              @default(IN_PRODUCTION)
    tagline                String?
    adult                  Boolean                  @default(false)
    MovieGenre             MovieGenre[]
    MovieProductionCompany MovieProductionCompany[]

    @@unique([id, title])
    @@map("movies")
}

enum movieStatus {
    RELEASED
    IN_PRODUCTION
    POST_PRODUCTION
    PLANNED
    CANCELLED
    RUMORED
}

model Genre {
    id         String       @id @default(uuid())
    name       String       @unique
    MovieGenre MovieGenre[]

    @@unique([id, name])
    @@map("generes")
}

model MovieGenre {
    id        String @id @default(uuid())
    movieId   Int
    generesId String

    movie Movie @relation(fields: [movieId], references: [id])
    genre Genre @relation(fields: [generesId], references: [id])

    @@unique([movieId, generesId])
    @@map("movie_genere")
}

model ProductionCompany {
    id                     Int                      @id @default(autoincrement())
    name                   String
    logoPath               String?
    originCOuntry          String?
    MovieProductionCompany MovieProductionCompany[]

    @@unique([id, name])
    @@map("production_companies")
}

model MovieProductionCompany {
    id           String            @id @default(uuid())
    movieId      Int
    productionId Int
    movie        Movie             @relation(references: [id], fields: [movieId])
    company      ProductionCompany @relation(references: [id], fields: [productionId])

    @@unique([movieId, productionId])
    @@map("movie_production_companies")
}

// people worked in the movie
model Person {
    id         String    @id @default(uuid())
    name       String
    birthDay   DateTime
    deathDay   DateTime?
    birthPlace String?
    socialPath String?
    adult      Boolean   @default(true)

    @@map("peoples")
}
